// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface ERC721 /* is ERC165 */  {
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
    function balanceOf(address _owner) external view returns (uint256);
    function ownerOf(uint256 _tokenId) external view returns (address);
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data)  external payable;
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
    function approve(address _approved, uint256 _tokenId) external ;
    function setApprovalForAll(address _operator, bool _approved) external;
    function getApproved(uint256 _tokenId) external view returns (address);
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);
}
interface IERC165   {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
interface ERC721TokenReceiver {
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory  _data) external returns(bytes4 );

}

contract NFT  is ERC721, IERC165, ERC721TokenReceiver {
  mapping(address => uint256) _balances;
  mapping(uint256 => address) _belongsTo;
  mapping(uint256 => address) _allowedTo;
  mapping(address => mapping(address => bool)) _operableTo;
  mapping(bytes4 => bool) private _supportedInterfaces;
  uint256 public totalMinted;
  string public name;
  string public symbol;
   mapping (uint256=>string) private _uris;

   bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
   mapping (bytes4 => bool) internal supportedInterfaces;
  address creator =0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db;
  address manager;
 uint256 [] ids;
 
 modifier onlyCreate {
      require( msg.sender ==  creator, 'no creator');
      _;
   }
  
   
  constructor() {
    name = "NFTwithpayable" ;
    symbol = "NFTP";
    manager = msg.sender;
    //supportedInterfaces[this.supportsInterface.selector] = true;
    _registerInterface(_INTERFACE_ID_ERC165);
  
  }
  
 
  function balanceOf(address _owner) external view returns (uint256) {
    return _balances[_owner];
  }
  function ownerOf(uint256 _tokenId) public view returns (address owner) {
    require(_tokenId < totalMinted, "unknown");
    return _belongsTo[_tokenId];
  }
  function getApproved(uint256 _tokenId) public view returns (address operator) {
    require(_tokenId < totalMinted, "unknown");
    return _allowedTo[_tokenId];
  }
  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {
    return _operableTo[_owner][_operator];
  }


  function approve(address _to, uint256 _tokenId) external  {
    require(ownerOf(_tokenId) == msg.sender, "!sender");
    require(msg.sender == manager, "manager: caller is not the manager");
    _approve(_to, _tokenId);
  }
  function setApprovalForAll(address _operator, bool _approved) external {
    require(_operator != msg.sender, "!sender");
    _operableTo[msg.sender][_operator] = _approved;
    emit ApprovalForAll(msg.sender, _operator, _approved);
  }

  function transfer(address _to, uint256 _tokenId) external payable {
    require(msg.value == 1 ether, 'Only 1 ether allowed to be transfered.');
   
    _transfer(msg.sender, _to, _tokenId);
   
   
      }

function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data)  external payable {
     require(getApproved(_tokenId) == msg.sender || isApprovedForAll(_from, msg.sender), "!sender");
     require(msg.value == 1 ether, 'Only 1 ether allowed to be transfered.');
     _transfer(_from, _to, _tokenId);
     uint32 size;
assembly {
    size := extcodesize(_to)
}
if(size > 0){
    ERC721TokenReceiver receiver = ERC721TokenReceiver(_to);
    require(receiver.onERC721Received(msg.sender,_from,_tokenId,_data) == bytes4(keccak256("onERC721Received(address,address,uint256,bytes)")));
}

    }
function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable{
  
 require(msg.value == 1 ether, 'Only 1 ether allowed to be transfered.');
    _transfer(_from, _to, _tokenId);
}

  function transferFrom(address _from, address _to, uint256 _tokenId) external payable {
    require(getApproved(_tokenId) == msg.sender || isApprovedForAll(_from, msg.sender), "!sender");
    require(msg.value == 1 ether, 'Only 1 ether allowed to be transfered.');
    _transfer(_from, _to, _tokenId);
    
  }
  
  function mint(address _to, string memory _uri,
uint id) external returns (uint256) {
    require(_to != address(0), "!receiver");
    require(msg.sender == manager, "manager: caller is not the manager");
    _balances[_to]++;
    _belongsTo[totalMinted] = _to;
    totalMinted++;
 _uris[id]=_uri;
    emit Transfer(address(0), _to, totalMinted - 1);
    return totalMinted - 1;
  }
 
function uri(uint256 id)  public view   returns (string memory) {
        
        return(_uris[id]);
        }
  function _transfer(address _from, address _to, uint256 _tokenId) internal {
    require(ownerOf(_tokenId) == _from, "!sender");
    require(_to != address(0), "!receiver");
    _approve(address(0), _tokenId);
    _balances[_to]++;
    _balances[_from]--;
    _belongsTo[_tokenId] = _to;
    emit Transfer(_from, _to, _tokenId);
  }
  function _approve(address _to, uint256 _tokenId) internal {
    _allowedTo[_tokenId] = _to;
    emit Approval(msg.sender, _to, _tokenId);
  }
    function withdraw() public payable  onlyCreate{
    (bool success, ) = payable(creator).call{value: address(this).balance}("");
    require(success);
  }
  function getBalance() public view returns (uint) {
        return address(this).balance;
  }
function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4){
        
    }
function _registerInterface(bytes4 interfaceId) internal {
        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
        _supportedInterfaces[interfaceId] = true;
    }
function supportsInterface(bytes4 interfaceId) external view returns (bool){
    return supportedInterfaces[interfaceId];
}
}
